import random
from config import bot, admins, profile, admin_chat, subscribers, likes, help_text, qiwi_text_nickname, QIWI_NUMBER,\
	QIWI_TOKEN, QIWI_NICKNAME, views_text, views_list, likes_tiktok, subscribers_tiktok, vk_friends_price, \
	instagram_like_price, views_tiktok_text, tiktok_views_list
from keyboard import main_keyboard, profile_keyboard, admin_menu_keyboard, service_keyboard, \
	order_keyboard, subscribe_type_keyboard, place_type_keyboard, deposit_methods_keyboard, \
	deposit_keyboard, delete_message_keyboard, views_keyboard, instagram_service_keyboard, \
	help_keyboard, vk_service_keyboard, tiktok_views_keyboard

from functions import get_user, join_to_db, order_likes, order_subscribe, check_deposit, get_comment, \
	new_deposit, delete_deposit, order_likes1, edit_balance, order_tiktok_subscribe, order_tiktok_likes, \
	search_user, ban_status_change, change_balance, mailing, order_vk_friends, order_instagram_likes, \
	order_instagram_subscribe, order_vk_messages, order_vk_subscribers


@bot.message_handler(commands=['start'])
def send_welcome(message):
	chat_id = message.chat.id
	if chat_id > 0:
		if get_user(chat_id) == None:
			join_to_db(user_id=chat_id)
		user = get_user(chat_id)
		if user[3] == "False":
			bot.send_message(chat_id=chat_id,
							text=f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
							reply_markup=main_keyboard())

@bot.message_handler(commands=['admin'])
def admin_menu(message):
	chat_id = message.chat.id
	if chat_id > 0:
		user = get_user(chat_id)
		if user != None:	
			if user[3] == "False":
				if chat_id in admins:
					bot.send_message(chat_id=message.from_user.id,
					 				text='–í—ã –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞.',
					  				reply_markup=admin_menu_keyboard())	


@bot.message_handler(content_types="text")
def main_menu(message):
	chat_id = message.chat.id
	if chat_id > 0:
		user = get_user(chat_id)
		if user != None:
			if user[3] == "False":
				if message.text == "üë§–ü—Ä–æ—Ñ–∏–ª—å":
					bot.send_message(chat_id=chat_id,
										text=profile(chat_id, user[1], user[2]),
										reply_markup=profile_keyboard(),
										parse_mode="HTML"
											)
				elif message.text == "üßæ–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
					bot.send_message(chat_id=chat_id,
										text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏.</b>",
										reply_markup=place_type_keyboard(),
										parse_mode="HTML"
											)
					bot.register_next_step_handler(message, place_menu)
				
				elif message.text == "üìö–ü–æ–º–æ—â—å":
					bot.send_message(chat_id=chat_id,
										text=help_text(),
										parse_mode="HTML",
										reply_markup=help_keyboard(),
										disable_web_page_preview=True)
				else:
					bot.send_message(chat_id=chat_id,
							text=f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.',
							reply_markup=main_keyboard())
		else:
			bot.send_message(chat_id=chat_id,
						text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")

@bot.message_handler(content_types="text")
def place_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "üõíTelegram":
				bot.send_message(chat_id=chat_id,
										text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏.</b>",
										reply_markup=service_keyboard(),
										parse_mode="HTML"
											)
				bot.register_next_step_handler(message, telegram_service_menu)
			
			elif message.text == "üìä–í–∫–æ–Ω—Ç–∞–∫—Ç–µ":
				bot.send_message(chat_id=chat_id,
										text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏.</b>",
										reply_markup=vk_service_keyboard(),
										parse_mode="HTML"
											)
				bot.register_next_step_handler(message, vk_service_menu)
			
			elif message.text == "üì±TikTok":
				bot.send_message(chat_id=chat_id,
										text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏.</b>",
										reply_markup=service_keyboard(),
										parse_mode="HTML"
											)
				bot.register_next_step_handler(message, tiktok_service_menu)

			elif message.text == "üì∑Instagram":
				bot.send_message(chat_id=chat_id,
										text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏.</b>",
										reply_markup=instagram_service_keyboard(),
										parse_mode="HTML"
											)
				
				bot.register_next_step_handler(message, instagram_service_menu)

			elif message.text == "‚è™–ù–∞–∑–∞–¥":
				bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=main_keyboard())
				bot.register_next_step_handler(message, main_menu)

	else:
		bot.send_message(chat_id=chat_id,
					text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")




@bot.message_handler(content_types="text")
def vk_service_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "üë•–î—Ä—É–∑—å—è":
				bot.send_message(chat_id=chat_id,
						text="<i>‚Ä¢ 1000-1500 –¥—Ä—É–∑–µ–π.\n"
						"‚Ä¢ –æ–±–µ–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É.\n"
						"‚Ä¢  —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω Kate Mobile.\n"
						"‚Ä¢ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç–ø–∏—Å–∫–∏.\n"
						"‚Ä¢ –∂–∏–≤—ã–µ (–≤—Ä–µ–º—è –Ω–∞–∫—Ä—É—Ç–∫–∏ 30-90 –º–∏–Ω—É—Ç)\n"
						"‚Ä¢ —É–∑–Ω–∞—Ç—å —Ç–æ–∫–µ–Ω https://vkhost.github.io/\n"
						"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ 25‚ÇΩ</i>",
						reply_markup=order_keyboard("vk_friends"),
						parse_mode="HTML"
							)

				bot.register_next_step_handler(message, vk_service_menu)
			
			elif message.text == "üì®–°–æ–æ–±—â–µ–Ω–∏—è":
				bot.send_message(chat_id=chat_id,
								text="‚Ä¢<i>1000 –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π=20‚ÇΩ\n"
									"‚Ä¢ —É–∑–Ω–∞—Ç—å —Ç–æ–∫–µ–Ω https://vkhost.github.io/\n"
									"‚Ä¢ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω VK ME\n"
									"‚Ä¢ –í–û–ó–ú–û–ñ–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê –í–ö‚ÄºÔ∏è\n"
									"‚Ä¢ –ù–ê–ö–†–£–¢–ö–ê –ò–î–Å–¢ –ë–´–°–¢–†–û\n"
									"‚Ä¢ –ù–ê–ö–†–£–¢–ö–ê –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô\n</i>",
								reply_markup=order_keyboard("vk_messages"),
								parse_mode="HTML")
				bot.register_next_step_handler(message, vk_service_menu)

			elif message.text == "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶–ì—Ä—É–ø–ø–∞":
				bot.send_message(chat_id=chat_id,
								text="<i>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤ –≥—Ä—É–ø–ø—É/–ø–∞–±–ª–∏–∫ VK\n\n"
									"üî∏ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫.\n"
									"‚åõÔ∏è –ü–ª–∞–≤–Ω–∞—è —Ä–∞—Å–∫—Ä—É—Ç–∫–∞.\n\n"
									"üí≤ –¶–µ–Ω–∞: 15 —Ä—É–±. –∑–∞ 100</i>",				
								reply_markup=order_keyboard("vk_public_subscribers"),
								parse_mode="HTML")

				bot.register_next_step_handler(message, vk_service_menu)
			
			elif message.text == "‚è™–ù–∞–∑–∞–¥":
				bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏.', reply_markup=place_type_keyboard())
				bot.register_next_step_handler(message, place_menu)

	else:
		bot.send_message(chat_id=chat_id,
						text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")

@bot.message_handler(content_types="text")
def instagram_service_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "üë•–ü–æ–¥–ø–∏—Å—á–∏–∫–∏":
				bot.send_message(chat_id=chat_id,
								text="<i>üî∏ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫.\n"
									"‚åõÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: –¥–æ 1500 –≤ —Å—É—Ç–∫–∏.\n"
									"üë™ –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n"
									"üí≤ –¶–µ–Ω–∞: 20 —Ä—É–±. –∑–∞ 100\n"
									"Cc—ã–ª–∫—É —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: https://www.instagram.com/***</i>",
								reply_markup=order_keyboard("instagram_subscribers"),
								parse_mode="HTML")

				bot.register_next_step_handler(message, instagram_service_menu)
			
			elif message.text == "‚ù§Ô∏è–õ–∞–π–∫–∏":
				bot.send_message(chat_id=chat_id,
								text="<i>–õ–∞–π–∫–∏ Instagram (–ñ–∏–≤—ã–µ)\n\n"
							 "üî∏ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫.\n"
							" ‚åõÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 2500 –≤ —Å—É—Ç–∫–∏.\n"
							"üë™ –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n"
							"üí≤ –¶–µ–Ω–∞: 15 —Ä—É–±. –∑–∞ 100</i>",
								reply_markup=order_keyboard("instagram_likes"),
								parse_mode="HTML")
				bot.register_next_step_handler(message, instagram_service_menu)
			
			elif message.text == "‚è™–ù–∞–∑–∞–¥":
				bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏.', reply_markup=place_type_keyboard())
				bot.register_next_step_handler(message, place_menu)

	else:
		bot.send_message(chat_id=chat_id,
						text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")

@bot.message_handler(content_types="text")
def telegram_service_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "üë•–ü–æ–¥–ø–∏—Å—á–∏–∫–∏":
				bot.send_message(chat_id=chat_id,
								text=subscribers(),
								reply_markup=order_keyboard("subscribers"),
								parse_mode="HTML")
				bot.register_next_step_handler(message, telegram_service_menu)
			
			# elif message.text == "üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã":
			# 	bot.send_message(chat_id=chat_id,
			# 					text=views_text(),
			# 					reply_markup=views_keyboard(),
			# 					parse_mode="HTML")
			# 	bot.register_next_step_handler(message, views_menu)
			
			# elif message.text == "‚ù§Ô∏è–ì–æ–ª–æ—Å–∞/–õ–∞–π–∫–∏":
			# 	bot.send_message(chat_id=chat_id,
			# 					text=likes(),
			# 					reply_markup=order_keyboard("likes"),
			# 					parse_mode="HTML")
			# 	bot.register_next_step_handler(message, telegram_service_menu)
			
			elif message.text == "‚è™–ù–∞–∑–∞–¥":
				bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏.', reply_markup=place_type_keyboard())
				bot.register_next_step_handler(message, place_menu)

	else:
		bot.send_message(chat_id=chat_id,
						text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")

@bot.message_handler(content_types="text")
def tiktok_service_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "üë•–ü–æ–¥–ø–∏—Å—á–∏–∫–∏":
				bot.send_message(chat_id=chat_id,
								text=subscribers_tiktok(),
								reply_markup=order_keyboard("tiktok_subscribers"),
								parse_mode="HTML")
				bot.register_next_step_handler(message, tiktok_service_menu)
			
			elif message.text == "üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã":
				bot.send_message(chat_id=chat_id,
								text=views_tiktok_text(),
								reply_markup=tiktok_views_keyboard(),
								parse_mode="HTML")
				bot.register_next_step_handler(message, tiktok_views_menu)

			elif message.text == "‚ù§Ô∏è–ì–æ–ª–æ—Å–∞/–õ–∞–π–∫–∏":
				bot.send_message(chat_id=chat_id,
								text=likes_tiktok(),
								reply_markup=order_keyboard("tiktok_likes"),
								parse_mode="HTML")
				bot.register_next_step_handler(message, tiktok_service_menu)
			
			elif message.text == "‚è™–ù–∞–∑–∞–¥":
				bot.send_message(chat_id=message.from_user.id, text=f'–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–æ—â–∞–¥–∫–∏.', reply_markup=place_type_keyboard())
				bot.register_next_step_handler(message, place_menu)

	else:
		bot.send_message(chat_id=chat_id,
					text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")

@bot.message_handler(content_types="text")
def tiktok_views_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã":
				user = get_user(chat_id)
				if user != None:
					price = 100
					if user[1] >= price:
						bot.send_message(chat_id=chat_id, 
							text="<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.</b>",
							parse_mode="HTML")
						bot.register_next_step_handler(message, order_likes1, price, amount=1, type_order="üëÄ–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã TIKTOK")
					else:
						bot.send_message(chat_id=chat_id,
							text="<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</b>",
							parse_mode="HTML")

			elif message.text in tiktok_views_list:
				user = get_user(chat_id)
				if user != None:
					price = int(message.text.split(" ")[2][:-1])			
					if user[1] >= price:
						bot.send_message(chat_id=chat_id,
							text="<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.</b>",
							parse_mode="HTML")
						bot.register_next_step_handler(message, order_likes1, price, amount=message.text.split(" ")[0], type_order="üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã TIKTOK")
					else:
						bot.send_message(chat_id=chat_id,
							text="<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</b>",
							parse_mode="HTML")

@bot.message_handler(content_types="text")
def views_menu(message):
	chat_id = message.chat.id
	user = get_user(chat_id)
	if user != None:
		if user[3] == "False":		
			if message.text == "–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã":
				user = get_user(chat_id)
				if user != None:
					price = 100
					if user[1] >= price:
						bot.send_message(chat_id=chat_id, 
							text="<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.</b>",
							parse_mode="HTML")
						bot.register_next_step_handler(message, order_likes1, price, amount=1, type_order="üëÄ–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã")
					else:
						bot.send_message(chat_id=chat_id,
							text="<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</b>",
							parse_mode="HTML")

			elif message.text in views_list:
				user = get_user(chat_id)
				if user != None:
					price = int(message.text.split(" ")[2][:-1])			
					if user[1] >= price:
						bot.send_message(chat_id=chat_id,
							text="<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.</b>",
							parse_mode="HTML")
						bot.register_next_step_handler(message, order_likes1, price, amount=message.text.split(" ")[0], type_order="üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä—ã")
					else:
						bot.send_message(chat_id=chat_id,
							text="<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</b>",
							parse_mode="HTML")

	else:
		bot.send_message(chat_id=chat_id,
					text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: True)
def answer(call):
	chat_id = call.message.chat.id
	message_id = call.message.message_id
	message = call.message

	if chat_id > 0:
		user = get_user(chat_id)
		if user != None:
			if user[3] == "False":
				if call.data.startswith("order"):
					service = call.data.split(":")[1]
					
					if service == "subscribers":
						bot.send_message(chat_id=chat_id,
									text="<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏</i>",
									reply_markup=subscribe_type_keyboard(),
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_subscribe)		
					
					elif service == "likes":
						bot.send_message(chat_id=chat_id,
									text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å</i>",
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_likes)

					elif service == "tiktok_subscribers":
						bot.send_message(chat_id=chat_id,
									text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å</i>",
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_tiktok_subscribe)

					elif service == "tiktok_likes":
						bot.send_message(chat_id=chat_id,
									text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å</i>",
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_tiktok_likes)

					elif service == "vk_friends":
						if user[1] >= vk_friends_price:
							bot.send_message(chat_id=chat_id,
										text="<i>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –í–∫–æ–Ω—Ç–∞–∫—Ç–µ.</i>",
										parse_mode="HTML")

							bot.register_next_step_handler(message, order_vk_friends)

						else:
							bot.send_message(chat_id=chat_id, text="<b>‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.</b>", parse_mode="HTML")
					
					elif service == "vk_public_subscribers":
						bot.send_message(chat_id=chat_id,
									text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å</i>",
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_vk_subscribers)

					elif service == "instagram_likes":
						bot.send_message(chat_id=chat_id,
									text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å</i>",
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_instagram_likes)

					elif service == "instagram_subscribers":
						bot.send_message(chat_id=chat_id,
									text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å</i>",
									parse_mode="HTML")

						bot.register_next_step_handler(message, order_instagram_subscribe)

					elif service == "vk_messages":
						bot.send_message(chat_id=chat_id,
										text="<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å.</i>",
										parse_mode="HTML")

						bot.register_next_step_handler(message, order_vk_messages)

				elif call.data == "deposit":
					bot.edit_message_text(chat_id=chat_id,
									message_id=message_id,
									text="<i>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.</i>",
									reply_markup=deposit_methods_keyboard(),
									parse_mode="HTML")
				
				elif call.data == "qiwi_method":
					comment = get_comment(chat_id)
					if comment == None:
						comment = random.randint(1000, 9999)
						new_deposit(chat_id, comment)
					bot.send_message(chat_id=chat_id,
									text=qiwi_text_nickname(comment),
									reply_markup=deposit_keyboard(comment),
									parse_mode="HTML")

				elif call.data == 'check_deposit':
					user = get_user(chat_id)
					if user != None:
						balance = user[1]
						answer, amount = check_deposit(chat_id, QIWI_NUMBER, QIWI_TOKEN, 20)
						if answer:
							delete_deposit(chat_id)
							edit_balance(chat_id, balance + amount)
							bot.send_message(chat_id=chat_id, text=f"<b>‚úÖ–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}</b>", parse_mode="HTML")
							bot.delete_message(chat_id=chat_id, message_id=message_id)
						else:
							bot.send_message(chat_id=chat_id, text=f'<b>‚ùå–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>',
							parse_mode="HTML",
							reply_markup=delete_message_keyboard())

				elif call.data == "del_deposit":
					delete_deposit(chat_id)			
					bot.delete_message(chat_id=chat_id, message_id=message_id)
					bot.send_message(chat_id=chat_id, text=f"<b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω</b>", parse_mode="HTML")

				elif call.data == "delete_message":
					bot.delete_message(chat_id=chat_id, message_id=message_id)

				elif call.data == "search_user":
					bot.send_message(chat_id=chat_id, text=f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
					bot.register_next_step_handler(message, search_user)

				elif call.data.startswith("change_balance"):
					user_id = call.data.split(":")[1]
					bot.send_message(chat_id=chat_id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
					bot.register_next_step_handler(message, change_balance, user_id)
				
				elif call.data.startswith("ban_user"):
					user_id = call.data.split(":")[1]
					ban_status_change(user_id, "True")
					bot.send_message(chat_id=chat_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")

				elif call.data.startswith("unban_user"):
					user_id = call.data.split(":")[1]
					ban_status_change(user_id, "False")
					bot.send_message(chat_id=chat_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–∞–±–∞–Ω–µ–Ω.")

				elif call.data == "mailing_menu":
					bot.send_message(chat_id=chat_id, text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
					bot.register_next_step_handler(message, mailing)
		else:
			bot.send_message(chat_id=chat_id,
						text=f'<b>‚ùóÔ∏è –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start .</b>', parse_mode="HTML")
	else:		
		
		if call.data.startswith("start_service"):
			bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
			user_id = call.data.split(":")[1]
			bot.send_message(chat_id=user_id,
							text="<i>–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è</i>",
							parse_mode="HTML",
							reply_markup=main_keyboard())
			bot.register_next_step_handler(message, main_menu)

		elif call.data.startswith("stop_service"):
			bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
			user_id = call.data.split(":")[1]
			bot.send_message(chat_id=user_id,
							text="<i>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –î–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</i>",
							parse_mode="HTML",
							reply_markup=main_keyboard())
			bot.register_next_step_handler(message, main_menu)

				
if __name__ == '__main__':
	try:
		bot.polling(none_stop = True, interval = 0)
	except Exception as e:
		bot.send_message(chat_id=1347410943, text=f"<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n{e}", parse_mode="HTML")
		while True:
			try:
				bot.polling(none_stop = True, interval = 0)
			except Exception as e:
				bot.send_message(chat_id=1347410943, text=f"<b>–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n{e}", parse_mode="HTML")